plugins {
    id 'java'
    id "io.qameta.allure" version "2.11.2"
    id "io.freefair.lombok" version "6.0.0-m2"
}

group = 'org.starkov'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def allureVersion = "2.23.0",
    selenideVersion = "6.13.0",
    appiumVersion = "8.3.0",
    junitVersion = "5.10.0",
    slf4jVersion = "2.0.7",
    restAssuredVersion = "5.3.1"

allure
        {
            adapter {
                aspectjWeaver.set(true)
                frameworks {
                    junit5 {
                        adapterVersion.set(allureVersion)
                    }
                }
            }
            report {
                version.set(allureVersion)
            }
        }

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "com.codeborne:selenide:$selenideVersion",
            "io.appium:java-client:$appiumVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.24.2",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "io.github.bonigarcia:webdrivermanager:5.4.1",
            "org.slf4j:slf4j-simple:$slf4jVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        if (System.getProperty("tag") != null && !System.getProperty("tag").isEmpty()) {
            includeTags System.getProperty("tag")
        }
    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}